@charset "utf-8";
@import "variables"; 

// Border Radius
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
          border-radius: $radius;
}

// Single Corner Border Radius
@mixin border-top-left-radius($radius) {
  -webkit-border-top-left-radius: $radius;
      -moz-border-radius-topleft: $radius;
          border-top-left-radius: $radius;
}
@mixin border-top-right-radius($radius) {
  -webkit-border-top-right-radius: $radius;
      -moz-border-radius-topright: $radius;
          border-top-right-radius: $radius;
}
@mixin border-bottom-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
      -moz-border-radius-bottomright: $radius;
          border-bottom-right-radius: $radius;
}
@mixin border-bottom-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
      -moz-border-radius-bottomleft: $radius;
          border-bottom-left-radius: $radius;
}

// Single Side Border Radius
@mixin border-top-radius($radius) {
  @include border-top-right-radius($radius);
  @include border-top-left-radius($radius);
}
@mixin border-right-radius($radius) {
  @include border-top-right-radius($radius);
  @include border-bottom-right-radius($radius);
}
@mixin border-bottom-radius($radius) {
  @include border-bottom-right-radius($radius);
  @include border-bottom-left-radius($radius);
}
@mixin border-left-radius($radius) {
  @include border-top-left-radius($radius);
  @include border-bottom-left-radius($radius);
}



@mixin rounded-corners ($radius) {
-webkit-border-radius: $radius;
-moz-border-radius: $radius;
-ms-border-radius: $radius;
  -o-border-radius: $radius;
  border-radius: $radius;
 
}


/*@mixin filter($f,$value){
-webkit-filter: $f~"(${value})";
-moz-filter: $f~"(${value})";
-o-filter: $f~"(${value})";
-ms-filter: $f~"(${value})";
}*/

// Drop shadows
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
     -moz-box-shadow: $shadow;
          box-shadow: $shadow;
       -o-box-shadow: $shadow;
      -ms-box-shadow: $shadow;

}

// Opacity
@mixin opacity($opacity) {
  opacity: $opacity / 100;
  filter: "alpha(opacity=${opacity})";
}

@mixin round-frame{
margin: 2%;
padding-top: 3%;
@include rounded-corners($borderRadiusSmall);
@include box-shadow($Sh5);  
}


@mixin round-frame2{
padding: 1em;
margin: 2em auto;
@include rounded-corners($borderRadiusLarge);
@include box-shadow($shadow);  
}



@mixin labelShadow(){
 @include box-shadow($Sh1,$Sh5,$Sh3); 
}

//preseteos de sombras
$Sh1: 0px 0px 6px 0px $cneutro;
$Sh2:0px 0px 6px 0px $black;
$Sh3:inset 2px 2px 30px 0px  darken($cneutro,15%);
$Sh4:0px 0px 1px 0px darken($cneutro,30%);
$Sh5:0px 0px 3px 1px $gray;
$Sh6:inset 2px 2px 30px 0px  darken($cneutro,10%);
$Sh7:inset 1px 1px 3px  darken($gray,15%);
$Sh8: 1px 1px 3px 0px #666666;
$Sh9: -1px -1px 3px 0px #666666;
$Sh10: 1px 1px 3px 0px black;
$Sh11:inset 2px 2px 30px 0px  darken($gray,15%);
$Sh12: 0px 0px 40px rgba(0, 0, 0, 0.4);
$Sh13: inset 0px 0px 50px rgba(0, 0, 0, 0.2);
$Sh14: inset 0px 0px 6.5px 1px rgba(0, 0, 0, 0.6);
$Sh15: 4px 4px 8px 0px rgba(0, 0, 0, 0.24); 
$Sh16: inset 0px 0px 35px 0px rgba(125, 161, 179, 0.20) ;
$Sh17: inset 0px 0px 4px 0px rgba(0, 0, 0, 0.24); 
$Sh18: 2px 5px 9px 0px rgba(0, 0, 0, 0.75);
$Sh19: 0px -2px 6px 0px rgba(0, 0, 0, 0.35);
$Sh20: -1px -1px 2px #004977;
$Sh21: 2px 2px 4px 0px rgba(0, 0, 0, 0.24); 
/*Lista  para test*/
$sombras: ($Sh1,$Sh2,$Sh3,$Sh4,$Sh5,$Sh6,$Sh7,$Sh8,$Sh9,$Sh10,$Sh11,$Sh12,$Sh13,$Sh14,$Sh15,$Sh16,$Sh17,$Sh18,$Sh19,$Sh20,$Sh21);

/* Preseteos de Vinetas */
$vig1:inset 0px 0px 10em rgba(0,0,0,1);
$vig2:inset 0px 0px 20em rgba(0,0,0,0.4);



@mixin sombrasClass($sombras){
   @for $j from 1 to (length($sombras)+1){
     $sombra: nth($sombras,$j);
     $name:Sh#{$j};
      .#{$name}{
        @include box-shadow($sombra); 
        }
}
}


// -------------------------
// Placeholder text
// -------------------------
@mixin placeholder($color,$fs:0.8em,$fst:italic) {
  :-moz-placeholder {
   @include placeHolderProps($color,$fs,$fst)    
   
  }
  :-ms-input-placeholder {
       @include placeHolderProps($color,$fs,$fst)
  }
  ::-webkit-input-placeholder {
       @include placeHolderProps($color,$fs,$fst)
  }
}

@mixin placeHolderProps($color,$fs,$fst){
        color:$color;
        font-size:$fs;
        font-style:$fst;
        font-weight: normal;
        padding-left: 1em;
    }


// IE7 inline-block
// ----------------
@mixin ie7-inline-block() {
  *display: inline; /* IE7 inline-block hack */
  *zoom: 1;
}

// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.
@mixin ie7-restore-left-whitespace() {
  *margin-left: .3em;

  &:first-child {
    *margin-left: 0;
  }
}

@mixin ie7-restore-right-whitespace() {
  *margin-right: .3em;
}


// Transformations
@mixin rotate($degrees) {
  -webkit-transform: rotate($degrees);
     -moz-transform: rotate($degrees);
      -ms-transform: rotate($degrees);
       -o-transform: rotate($degrees);
          transform: rotate($degrees);
}
@mixin scale($ratio) {
  -webkit-transform: scale($ratio);
     -moz-transform: scale($ratio);
      -ms-transform: scale($ratio);
       -o-transform: scale($ratio);
          transform: scale($ratio);
}
@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
     -moz-transform: translate($x, $y);
      -ms-transform: translate($x, $y);
       -o-transform: translate($x, $y);
          transform: translate($x, $y);
}
@mixin skew($x, $y) {
  -webkit-transform: skew($x, $y);
     -moz-transform: skew($x, $y);
      -ms-transform: skewX($x) skewY($y); // See https://github.com/twitter/bootstrap/issues/4885
       -o-transform: skew($x, $y);
          transform: skew($x, $y);
  -webkit-backface-visibility: hidden; // See https://github.com/twitter/bootstrap/issues/5319
}
@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
     -moz-transform: translate3d($x, $y, $z);
       -o-transform: translate3d($x, $y, $z);
          transform: translate3d($x, $y, $z);
}

// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden
// See git pull https://github.com/dannykeane/bootstrap.git backface-visibility for examples
@mixin backface-visibility($visibility){
  -webkit-backface-visibility: $visibility;
     -moz-backface-visibility: $visibility;
          backface-visibility: $visibility;
}

// Background clipping
// Heads up: FF 3.6 and under need "padding" instead of "padding-box"
@mixin background-clip($clip) {
  -webkit-background-clip: $clip;
     -moz-background-clip: $clip;
          background-clip: $clip;
}

// Background sizing
@mixin background-size($size) {
  -webkit-background-size: $size;
     -moz-background-size: $size;
       -o-background-size: $size;
          background-size: $size;
}


// Box sizing
@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
     -moz-box-sizing: $boxmodel;
          box-sizing: $boxmodel;
}

// User select
// For selecting text on the page
@mixin user-select($select) {
  -webkit-user-select: $select;
     -moz-user-select: $select;
      -ms-user-select: $select;
       -o-user-select: $select;
          user-select: $select;
}

// Resize anything
@mixin resizable($direction) {
  resize: $direction; // Options: horizontal, vertical, both
  overflow: auto; // Safari fix
}
/*CSS3 transition-- 
$prop: propiedad | all 

$tdur:50ms

$timfunc:
linear
ease-in
ease-out
ease-in-out
step-start
step-end

$tdelay: 1s | 1000 ms
* 
* */
 
@mixin transition($prop,$tdur,$timfunc,$tdelay){
-webkit-transition: $prop $tdur $timfunc $tdelay;
-moz-transition: $prop $tdur $timfunc $tdelay;
-o-transition: $prop $tdur $timfunc $tdelay;
transition: $prop $tdur $timfunc $tdelay;
}
/*.center-porcentaje($cant,$ancho){
   width:$ancho+"%";
  $margin=2;
  HACER LA CUENTA

}*/


/* Selectores H con el mismo color*/
/* @mixin hColor ($index) when ($index > 0) {
    h${index} {
        color: $headColor;
    }
    @include hColor($index - 1);
}*/



/*Vignette para imagenes
 @vig: preseteo de vi√±eta
 * */
@mixin vignette($vig:$vig1,$rc:false){
position: relative;

&:after{
  @include vig($vig);
position: absolute;
 top: 0;
 left: 0;
 width: 100%;
 height: 100%;
 z-index: 2;
 content: "";
}
& img{
   display: block;
}
}
@mixin vig($vig){
-webkit-box-shadow: $vig;
-moz-box-shadow:    $vig;
box-shadow:         $vig;  
}






@mixin rounded-div($bgcolor, $align:center){
    @include rounded-corners(1em);
    background-color:$bgcolor;
    text-align: $align;
    padding: 5% 10% 5% 10% ;
}
/*
 * @name: class name
 * @Cs: color set list
 * @$h : altura
 * */
@mixin tags($name,$h: 30px,$Cs: $Cs3,$shadow: $Sh1,$bck-color: #fff){
  $color: Cs-color($Cs);
  $bgcolor:Cs-bgcolor($Cs);
  $hcolor:Cs-hcolor($Cs);
  $hbgcolor:Cs-bghcolor($Cs);

.#{$name}-container{
  height: auto;
  overflow: auto;
  padding-bottom: 10px;
}

.#{$name}{
    display: block;
  }
.#{$name} li{
     padding-top:($h/4);
     list-style: none;
     margin:0;
   }
.#{$name} li, .#{$name} a{
  float:left;
  height: $h;
  line-height: $h;
  position:relative;
  font-size:($h/2);
  }
.#{$name} a{
  margin-left:(($h/12)*10);
  padding:0 (($h/12)*5) 0 ($h/2);
  background:$bgcolor;
  color:$color;
  text-decoration:none;
  @include border-bottom-right-radius(($h/6));
  @include border-top-right-radius(($h/6));
  @include box-shadow($shadow);
  z-index: 1000;
  } 
  
.#{$name} a:before{
  content:"";
  float:left;
  position:absolute;
  top:0;
  left:-($h/2);
  width:0;
  height:0;
  border-color:transparent $bgcolor transparent transparent;
  border-style:solid;
  border-width:($h/2) ($h/2) ($h/2) 0;  
  }
  
.#{$name} a:after{
  content:"";
  position:absolute;
  top:(($h/12)*5);
  left:0;
  float:left;
  width:($h/6);
  height:($h/6);
  @include border-radius(($h/12));
  background:$bck-color;
  @include box-shadow(-1px -1px 2px $black);
  }
.#{$name} a:hover{
  color: $hcolor;
  background:$hbgcolor;
  } 
.#{$name} a:hover:before{
  border-color:transparent $hbgcolor transparent transparent;
  }
}

@mixin iconoVar($icono){
  content:"#{$icono}";
}


@mixin hColor ($index)  {
  @while ($index > 0){
    h#{$index} {
        color: $headColor;
    }
    @include hColor($index - 1);
  }
    
}




@mixin gradient($color: #F5F5F5, $start: #EEE, $stop: #FFF) {
  background: $color;
  background: -webkit-gradient(linear,
                               left bottom,
                               left top,
                               color-stop(0, $start),
                               color-stop(1, $stop));
  background: -ms-linear-gradient(bottom,
                                  $start,
                                  $stop);
  background: -moz-linear-gradient(center bottom,
                                   $start 0%,
                                   $stop 100%);
  background: -o-linear-gradient($stop,
                                 $start);
  //filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",$stop,$start));
}

@mixin makeWSteps($pref,$step,$unit,$max) {
  @while ($max >= $step){
    $sname: #{$pref}#{$max};
      #{$sname}{
        width: #{$max}#{$unit};
      }
@include makeWSteps($pref,$step,$unit,$max - $step);
  }
}


@mixin selection($color,$bgcolor){
    ::selection {color:$color;background:$bgcolor;}
    ::-moz-selection {color:$color;background:$bgcolor;}
}


@function evalColor($c){
    @if $c == 'c1'{@return $c1;}
    @if $c == 'c2'{@return $c2;}
    @if $c == 'c3'{@return $c3;}
    @if $c == 'c4'{@return $c4;}
    $cn: number(str-slice($c, 2 , 2)); //color number
    $val: str-slice($c, 3 , 3); //blancos o negros
    $cp: number(str-slice($c, 4 , 4)); //color pos
    $list: null;
      @if $val == 'b'{
      $list:$blancos;
      }
      @else if $val == 'n'{
        $list:$negros;
      }
    @if $list != null{
      $cl: nth($list,$cn);
      $ccc: nth($cl,$cp);
      @return $ccc;
    }    
    @warn "no tengo idea que color es";
    @return $c;
}


@function number($string) {
  // Matrices
  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
  $numbers:  0   1   2   3   4   5   6   7   8   9;
  
  // Result
  $result: 0;

  // Looping through all characters
  @for $i from 1 through str-length($string) {
      $character: str-slice($string, $i, $i);
      $index: index($strings, $character);
    
    @if not $index {
       @warn "Unknown character `#{$character}`.";
      @return false;
  }
      
    $number: nth($numbers, $index);
    $result: $result * 10 + $number;
  }
  
  @return $result;
}
